// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/auth/v1beta1/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BaseAccount {
    // message fields
    pub address: ::std::string::String,
    pub pub_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub account_number: u64,
    pub sequence: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BaseAccount {
    fn default() -> &'a BaseAccount {
        <BaseAccount as ::protobuf::Message>::default_instance()
    }
}

impl BaseAccount {
    pub fn new() -> BaseAccount {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .google.protobuf.Any pub_key = 2;


    pub fn get_pub_key(&self) -> &::protobuf::well_known_types::Any {
        self.pub_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.pub_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // uint64 account_number = 3;


    pub fn get_account_number(&self) -> u64 {
        self.account_number
    }
    pub fn clear_account_number(&mut self) {
        self.account_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: u64) {
        self.account_number = v;
    }

    // uint64 sequence = 4;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for BaseAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.account_number = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.account_number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.account_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(4, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.account_number != 0 {
            os.write_uint64(3, self.account_number)?;
        }
        if self.sequence != 0 {
            os.write_uint64(4, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BaseAccount {
        BaseAccount::new()
    }

    fn default_instance() -> &'static BaseAccount {
        static instance: ::protobuf::rt::LazyV2<BaseAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BaseAccount::new)
    }
}

impl ::protobuf::Clear for BaseAccount {
    fn clear(&mut self) {
        self.address.clear();
        self.pub_key.clear();
        self.account_number = 0;
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ModuleAccount {
    // message fields
    pub base_account: ::protobuf::SingularPtrField<BaseAccount>,
    pub name: ::std::string::String,
    pub permissions: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModuleAccount {
    fn default() -> &'a ModuleAccount {
        <ModuleAccount as ::protobuf::Message>::default_instance()
    }
}

impl ModuleAccount {
    pub fn new() -> ModuleAccount {
        ::std::default::Default::default()
    }

    // .cosmos.auth.v1beta1.BaseAccount base_account = 1;


    pub fn get_base_account(&self) -> &BaseAccount {
        self.base_account.as_ref().unwrap_or_else(|| <BaseAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_account(&mut self) {
        self.base_account.clear();
    }

    pub fn has_base_account(&self) -> bool {
        self.base_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_account(&mut self, v: BaseAccount) {
        self.base_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_account(&mut self) -> &mut BaseAccount {
        if self.base_account.is_none() {
            self.base_account.set_default();
        }
        self.base_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_account(&mut self) -> BaseAccount {
        self.base_account.take().unwrap_or_else(|| BaseAccount::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string permissions = 3;


    pub fn get_permissions(&self) -> &[::std::string::String] {
        &self.permissions
    }
    pub fn clear_permissions(&mut self) {
        self.permissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_permissions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.permissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_permissions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.permissions
    }

    // Take field
    pub fn take_permissions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.permissions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ModuleAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_account)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.permissions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.permissions {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.permissions {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleAccount {
        ModuleAccount::new()
    }

    fn default_instance() -> &'static ModuleAccount {
        static instance: ::protobuf::rt::LazyV2<ModuleAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModuleAccount::new)
    }
}

impl ::protobuf::Clear for ModuleAccount {
    fn clear(&mut self) {
        self.base_account.clear();
        self.name.clear();
        self.permissions.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ModuleCredential {
    // message fields
    pub module_name: ::std::string::String,
    pub derivation_keys: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModuleCredential {
    fn default() -> &'a ModuleCredential {
        <ModuleCredential as ::protobuf::Message>::default_instance()
    }
}

impl ModuleCredential {
    pub fn new() -> ModuleCredential {
        ::std::default::Default::default()
    }

    // string module_name = 1;


    pub fn get_module_name(&self) -> &str {
        &self.module_name
    }
    pub fn clear_module_name(&mut self) {
        self.module_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_module_name(&mut self, v: ::std::string::String) {
        self.module_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_name(&mut self) -> &mut ::std::string::String {
        &mut self.module_name
    }

    // Take field
    pub fn take_module_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.module_name, ::std::string::String::new())
    }

    // repeated bytes derivation_keys = 2;


    pub fn get_derivation_keys(&self) -> &[::std::vec::Vec<u8>] {
        &self.derivation_keys
    }
    pub fn clear_derivation_keys(&mut self) {
        self.derivation_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_derivation_keys(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.derivation_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_derivation_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.derivation_keys
    }

    // Take field
    pub fn take_derivation_keys(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.derivation_keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ModuleCredential {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.module_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.derivation_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.module_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.module_name);
        }
        for value in &self.derivation_keys {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.module_name.is_empty() {
            os.write_string(1, &self.module_name)?;
        }
        for v in &self.derivation_keys {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleCredential {
        ModuleCredential::new()
    }

    fn default_instance() -> &'static ModuleCredential {
        static instance: ::protobuf::rt::LazyV2<ModuleCredential> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModuleCredential::new)
    }
}

impl ::protobuf::Clear for ModuleCredential {
    fn clear(&mut self) {
        self.module_name.clear();
        self.derivation_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleCredential {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Params {
    // message fields
    pub max_memo_characters: u64,
    pub tx_sig_limit: u64,
    pub tx_size_cost_per_byte: u64,
    pub sig_verify_cost_ed25519: u64,
    pub sig_verify_cost_secp256k1: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // uint64 max_memo_characters = 1;


    pub fn get_max_memo_characters(&self) -> u64 {
        self.max_memo_characters
    }
    pub fn clear_max_memo_characters(&mut self) {
        self.max_memo_characters = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_memo_characters(&mut self, v: u64) {
        self.max_memo_characters = v;
    }

    // uint64 tx_sig_limit = 2;


    pub fn get_tx_sig_limit(&self) -> u64 {
        self.tx_sig_limit
    }
    pub fn clear_tx_sig_limit(&mut self) {
        self.tx_sig_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_sig_limit(&mut self, v: u64) {
        self.tx_sig_limit = v;
    }

    // uint64 tx_size_cost_per_byte = 3;


    pub fn get_tx_size_cost_per_byte(&self) -> u64 {
        self.tx_size_cost_per_byte
    }
    pub fn clear_tx_size_cost_per_byte(&mut self) {
        self.tx_size_cost_per_byte = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_size_cost_per_byte(&mut self, v: u64) {
        self.tx_size_cost_per_byte = v;
    }

    // uint64 sig_verify_cost_ed25519 = 4;


    pub fn get_sig_verify_cost_ed25519(&self) -> u64 {
        self.sig_verify_cost_ed25519
    }
    pub fn clear_sig_verify_cost_ed25519(&mut self) {
        self.sig_verify_cost_ed25519 = 0;
    }

    // Param is passed by value, moved
    pub fn set_sig_verify_cost_ed25519(&mut self, v: u64) {
        self.sig_verify_cost_ed25519 = v;
    }

    // uint64 sig_verify_cost_secp256k1 = 5;


    pub fn get_sig_verify_cost_secp256k1(&self) -> u64 {
        self.sig_verify_cost_secp256k1
    }
    pub fn clear_sig_verify_cost_secp256k1(&mut self) {
        self.sig_verify_cost_secp256k1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_sig_verify_cost_secp256k1(&mut self, v: u64) {
        self.sig_verify_cost_secp256k1 = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_memo_characters = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_sig_limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_size_cost_per_byte = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sig_verify_cost_ed25519 = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sig_verify_cost_secp256k1 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.max_memo_characters != 0 {
            my_size += ::protobuf::rt::value_size(1, self.max_memo_characters, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_sig_limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tx_sig_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_size_cost_per_byte != 0 {
            my_size += ::protobuf::rt::value_size(3, self.tx_size_cost_per_byte, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sig_verify_cost_ed25519 != 0 {
            my_size += ::protobuf::rt::value_size(4, self.sig_verify_cost_ed25519, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sig_verify_cost_secp256k1 != 0 {
            my_size += ::protobuf::rt::value_size(5, self.sig_verify_cost_secp256k1, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.max_memo_characters != 0 {
            os.write_uint64(1, self.max_memo_characters)?;
        }
        if self.tx_sig_limit != 0 {
            os.write_uint64(2, self.tx_sig_limit)?;
        }
        if self.tx_size_cost_per_byte != 0 {
            os.write_uint64(3, self.tx_size_cost_per_byte)?;
        }
        if self.sig_verify_cost_ed25519 != 0 {
            os.write_uint64(4, self.sig_verify_cost_ed25519)?;
        }
        if self.sig_verify_cost_secp256k1 != 0 {
            os.write_uint64(5, self.sig_verify_cost_secp256k1)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.max_memo_characters = 0;
        self.tx_sig_limit = 0;
        self.tx_size_cost_per_byte = 0;
        self.sig_verify_cost_ed25519 = 0;
        self.sig_verify_cost_secp256k1 = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
